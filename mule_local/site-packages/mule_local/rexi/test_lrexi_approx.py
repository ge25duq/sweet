#! /usr/bin/env python3
#   THIS FILE IS TEMPORARY AND WILL BE MERGED INTO TEST_REXI_APROX LATER
import sys
import numpy as np

from Functions import *
from lrexi.LREXI import *

for rexi_method in [
        "lrexi",
    ]:

    #for function_name in ["phi0", "phi1", "phi2", "phi3"]: #, "ups1", "ups2", "ups3"]:
    for function_name in ["phi0"]: #, "phi1", "phi2", "phi3"]: #, "ups1", "ups2", "ups3"]
    #for function_name in ["phi0"]:

        
        # CI-REXI: Number of quadrature poles
        #N = M
        N = 256

        # Testing: number of samples
        num_test_samples = 12345

        # Testing: Range (start, end)
        test_range = [None, None]

        # Error to test for
        error_eps = 1e-8

        # verbose
        verbosity = 10
        verbosity = 0

        # efloat_mode
        efloat_mode = "float"
        #efloat_mode = "mpfloat"


        coeffs = None

        
        if rexi_method == "lrexi":

            lrexi = LREXI(efloat_mode=efloat_mode)

            coeffs = lrexi.setup(
                function_name = function_name,
                N = N
            )

            # Convert to floating point
            coeffs = coeffs.toFloat()

            unique_id_string = lrexi.getUniqueId()

            #test_range = [-lambda_include_imag*0.5, lambda_include_imag*0.5]
            test_range = [-1.0, 1.0]
      
        else:
            raise Exception("Unsupported REXI method")

        function = Functions(
            function_name = function_name,
            efloat_mode = "float"
        )


        print("")
        print(unique_id_string)
        print(" + function_name: "+function_name)

        max_error = 0
        for x in np.linspace(test_range[0], test_range[1], num_test_samples):
            lam = 1j*x

            y = function.eval(lam)
            yn = coeffs.eval(lam)

            err = np.abs(y-yn)

            if verbosity > 0:

                #if True:
                if False:
                    print("x="+str(lam)+"\t\terror="+str(err))
                else:
                    print("Lambda: "+str(lam))
                    print(" +  exact: "+str(y))
                    print(" + approx: "+str(yn))
                    print(" + Error: "+str(err))
                    print("")

            max_error = max(max_error, err)


        if verbosity == 0:
            print(" + test_range: ["+str(test_range[0])+", "+str(test_range[1])+"]")
            print(" + Error: "+str(max_error))

        if max_error > error_eps:
            raise Exception("Error threshold "+str(error_eps)+" exceeded")

        coeffs.write_file("/tmp/REXI_"+rexi_method+"_"+unique_id_string+"_txt.txt", False)
        coeffs.write_file("/tmp/REXI_"+rexi_method+"_"+unique_id_string+"_bin.txt", True)

