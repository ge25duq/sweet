import os
import sys
import glob

Import('env', 'p')

sweet_root = env['MULE_SOFTWARE_ROOT']+'/'


mainsrcadddir = ''

if p.program != '':
    mainsrcadddir = 'src/programs/'+p.program
elif p.unit_test != '':
    mainsrcadddir = 'src/unit_tests/'+p.unit_test
else:
    mainsrcadddir = ''

if mainsrcadddir != '':

    #
    # Add an action to move any module files
    #
    def moveModFiles(target=None, source=None, env=None):
        import glob, os, os.path
        targetdir = target[0].dir
        for t in target:
            if t.name[-4:] == '.mod':
                os.rename(t.name,os.path.join(str(targetdir),t.name))


    #
    # Add main source file
    #
    main_src = mainsrcadddir+'.cpp'
    env.src_files.append(env.Object(main_src))

    #
    # Check for additional source files and directories which should be added
    # This can be specified in the main program/test source file via e.g.
    #
    # MULE_COMPILE_DIRS: [file1] [dir2] [file2] [file3]
    #
    # The files and directories need to be specified to the software's root directory
    #

    f = open(sweet_root+'/'+main_src, 'r')
    lines = f.readlines()

    fad_list = []
    tag = 'MULE_COMPILE_FILES_AND_DIRS: '
    for l in lines:
        if tag in l:
            fad = l[l.find(tag)+len(tag):]
            fad = fad.replace('\r', '')
            fad = fad.replace('\n', '')
            fad_list += fad.split(' ')

    for k in fad_list:
        abs_k = sweet_root+'/'+k
        if os.path.isdir(abs_k):
            print("Processing additional directory '"+abs_k+"'")

            cpp_files = glob.glob(abs_k+'/*.cpp')
            for i in cpp_files:
                filerelpath = i.replace(sweet_root+"/", '')

                # SWE REXI special file handling for threaded parallelization over the REXI sum
                filetmp = os.path.basename(filerelpath)
                if 'l_rexi' in filetmp or 'lg_rexi' in filetmp or 'lf_rexi' in filetmp:
                    if p.rexi_thread_parallel_sum=='enable':
                        env_omp = env.Clone()
                        env_omp.Append(CXXFLAGS = ' -fopenmp')
                        env_omp.src_files.append(env_omp.Object(filerelpath))
                    else:
                        print(filerelpath)
                        env.src_files.append(env.Object(filerelpath))
                else:
                    env.src_files.append(env.Object(filerelpath))

            fortran_files = glob.glob(abs_k+'/*.f90')
            for i in fortran_files:
                filerelpath = i.replace(sweet_root+'/', '')

                obj = env.Object(filerelpath)
                env.src_files.append(obj)
                #env.AddPostAction(obj, moveModFiles)

        elif os.path.isfile(abs_k):
            print("Processing additional file '"+abs_k+"'")

            obj = env.Object(abs_k)
            env.src_files.append(obj)

        else:
            raise Exception("Error file processing file or directory '"+abs_k+"'")


Export('env', 'p')

